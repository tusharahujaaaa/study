################################# Questions #################################

# General Questions
    # Can you explain your experience with Angular projects?
    # How do you stay updated on the latest Angular features and updates?
    # What are the benefits of using Angular over other frameworks like React or Vue?
# Angular Basics
    # What are the main differences between AngularJS and Angular?
    # What is the purpose of Angular modules (NgModule), and how do they work?
    # Explain Angular's component-based architecture and its advantages.
# Components and Templates
    # What is the role of Angular components, and how do you create one?
    # What are Angular lifecycle hooks, and when would you use ngOnInit vs. ngAfterViewInit?
    # How do you handle parent-child communication in Angular?
# Directives
    # What is the difference between structural and attribute directives in Angular?
    # How do you create a custom directive, and when would you use one?
    # Explain how *ngIf, *ngFor, and *ngSwitch work.
# Data Binding
    # What are the four types of data binding in Angular, and when would you use each?
    # How does Angular handle two-way data binding with [(ngModel)]?
# Routing
    # How does Angular’s routing system work?
    # What is lazy loading, and how do you implement it in Angular?
    # What are route guards, and how do you use CanActivate or CanDeactivate?
# Forms
    # What is the difference between template-driven and reactive forms?
    # How do you handle form validation in Angular applications?
    # How would you dynamically add form controls to a reactive form?
# Services and Dependency Injection
    # What is dependency injection, and how does Angular implement it?
    # How do you create and use a service in Angular?
    # Explain the providedIn property in Angular services.
# RxJS and Observables
    # What is RxJS, and why is it important in Angular?
    # Explain the difference between Observable and Promise.
    # What are Subject, BehaviorSubject, and ReplaySubject, and when would you use them?
    # How do you handle error scenarios in observables?
# State Management
    # Have you worked with NgRx or other state management libraries? Explain their purpose.
    # How do you handle shared state between components without using a state management library?
# Testing
    # How do you write unit tests for Angular components and services?
    # What is the role of Jasmine and Karma in Angular testing?
    # How do you test HTTP requests in Angular?
# Performance Optimization
    # What is the role of ChangeDetectionStrategy.OnPush, and when would you use it?
    # How do you optimize Angular apps with lazy loading?
    # What is the purpose of the trackBy function in *ngFor?
# Advanced Topics
    # What is Ahead-of-Time (AOT) compilation, and how does it differ from Just-in-Time (JIT) compilation?
    # Explain how Angular handles dependency injection hierarchies.
    # What is the purpose of Angular zones, and how does NgZone work?
    # How do you handle application state when using Angular Universal for server-side rendering?
# Debugging and Tools
    # How do you debug Angular applications?
    # Have you used Angular DevTools? If so, how?
    # What is the difference between Angular CLI and manually setting up an Angular project?
# Scenario-Based Questions
    # How would you handle a performance issue caused by a large number of DOM updates?
    # How would you migrate an AngularJS project to Angular?
    # Describe a situation where you had to solve a challenging problem in an Angular application.


################################# Answers #################################

# ### **General Questions**

# 1. **Can you explain your experience with Angular projects?**  
#    - Describe your recent projects using Angular, such as their purpose, challenges faced, features developed, and your role in the team. Mention your use of Angular features like routing, lazy loading, forms, and services.

# 2. **How do you stay updated on the latest Angular features and updates?**  
#    - Regularly follow the [Angular Blog](https://blog.angular.io/), GitHub repository, and updates from the Angular team. Watch conferences like ng-conf and use online platforms like Medium or Dev.to.

# 3. **What are the benefits of using Angular over other frameworks like React or Vue?**  
#    - Strong typing with TypeScript, a robust CLI, built-in dependency injection, two-way data binding, and end-to-end tooling with testing libraries. 

# ---

# ### **Angular Basics**

# 4. **What are the main differences between AngularJS and Angular?**  
#    - **AngularJS:** JavaScript-based, uses scope and controllers, two-way binding with dirty checking.  
#    - **Angular:** TypeScript-based, component-based architecture, reactive programming with RxJS, improved performance.

# 5. **What is the purpose of Angular modules (`NgModule`), and how do they work?**  
#    - Organize application functionality into containers. They declare components, directives, pipes, and services. Features like lazy loading are configured via modules.

# 6. **Explain Angular's component-based architecture and its advantages.**  
#    - Angular apps are built using components that encapsulate logic, templates, and styles. This modularity ensures reusability, testability, and maintainability.

# ---

# ### **Components and Templates**

# 7. **What is the role of Angular components, and how do you create one?**  
#    - Components control views with their templates and logic. Use the CLI command:  
#      ```bash
#      ng generate component component-name
#      ```

# 8. **What are Angular lifecycle hooks, and when would you use `ngOnInit` vs. `ngAfterViewInit`?**  
#    - `ngOnInit` is for initializing data or fetching resources before the view renders.  
#    - `ngAfterViewInit` runs after the component’s view is fully initialized, useful for interacting with child components or DOM elements.

# 9. **How do you handle parent-child communication in Angular?**  
#    - Use `@Input` for passing data to a child component and `@Output` with `EventEmitter` to send data back to the parent.

# ---

# ### **Directives**

# 10. **What is the difference between structural and attribute directives in Angular?**  
#     - Structural directives (e.g., `*ngIf`, `*ngFor`) modify the DOM structure.  
#     - Attribute directives (e.g., `[ngClass]`, `[ngStyle]`) modify the behavior or appearance of DOM elements.

# 11. **How do you create a custom directive, and when would you use one?**  
#     - Use the `@Directive` decorator. Example:  
#       ```typescript
#       @Directive({ selector: '[appHighlight]' })  
#       export class HighlightDirective {  
#         constructor(el: ElementRef) { el.nativeElement.style.color = 'blue'; }  
#       }
#       ```

# 12. **Explain how `*ngIf`, `*ngFor`, and `*ngSwitch` work.**  
#     - `*ngIf`: Conditionally renders a DOM element.  
#     - `*ngFor`: Iterates over a collection.  
#     - `*ngSwitch`: Conditionally displays a set of elements.

# ---

# ### **Data Binding**

# 13. **What are the four types of data binding in Angular, and when would you use each?**  
#     - **Interpolation**: Display dynamic values.  
#     - **Property Binding**: Bind DOM properties.  
#     - **Event Binding**: Handle user events.  
#     - **Two-way Binding**: Sync data using `[(ngModel)]`.

# 14. **How does Angular handle two-way data binding with `[(ngModel)]`?**  
#     - Combines property binding `[value]` and event binding `(input)` into a single syntax.

# ---

# ### **Routing**

# 15. **How does Angular’s routing system work?**  
#     - Routes define navigation paths. Use `RouterModule` to configure and `routerLink` for navigation.

# 16. **What is lazy loading, and how do you implement it in Angular?**  
#     - Load modules on demand to improve performance. Configure `loadChildren` in route definitions.

# 17. **What are route guards, and how do you use `CanActivate` or `CanDeactivate`?**  
#     - Guards control access to routes. Example:  
#       ```typescript
#       { path: 'dashboard', component: Dashboard, canActivate: [AuthGuard] }
#       ```

# ---

# ### **Forms**

# 18. **What is the difference between template-driven and reactive forms?**  
#     - **Template-driven**: Easier, uses Angular directives.  
#     - **Reactive**: More control, uses `FormControl` and `FormGroup`.

# 19. **How do you handle form validation in Angular applications?**  
#     - Use Angular’s validation directives like `required`, `minlength`, or custom validators.

# 20. **How would you dynamically add form controls to a reactive form?**  
#     - Use `FormArray`. Example:  
#       ```typescript
#       this.formArray.push(new FormControl(''));
#       ```

# ---

# ### **Services and Dependency Injection**

# 21. **What is dependency injection, and how does Angular implement it?**  
#     - A design pattern to provide dependencies. Angular uses the injector hierarchy.

# 22. **How do you create and use a service in Angular?**  
#     - Create with the `@Injectable` decorator and inject it in components via the constructor.

# 23. **Explain the `providedIn` property in Angular services.**  
#     - Determines the injector scope. Default is `providedIn: 'root'`, making it a singleton.

# ---

# ### **RxJS and Observables**

# 24. **What is RxJS, and why is it important in Angular?**  
#     - RxJS handles asynchronous data streams using observables. Used for HTTP requests, event handling, etc.

# 25. **Explain the difference between `Observable` and `Promise`.**  
#     - Observables are lazy and support multiple values. Promises are eager and return one value.

# 26. **What are `Subject`, `BehaviorSubject`, and `ReplaySubject`, and when would you use them?**  
#     - `Subject`: Multicast.  
#     - `BehaviorSubject`: Emits the latest value.  
#     - `ReplaySubject`: Emits a specified number of past values.

# 27. **How do you handle error scenarios in observables?**  
#     - Use the `catchError` operator. Example:  
#       ```typescript
#       observable.pipe(catchError(err => of([])));
#       ```

# ---

# ### **State Management**

# 28. **Have you worked with NgRx or other state management libraries? Explain their purpose.**  
#     - NgRx manages app state predictably using actions, reducers, and a store.

# 29. **How do you handle shared state between components without using a state management library?**  
#     - Use services with `Subject` or `BehaviorSubject`.

# ---

# ### **Testing**

# 30. **How do you write unit tests for Angular components and services?**  
#     - Use `TestBed` for component creation and mocks for services.

# 31. **What is the role of Jasmine and Karma in Angular testing?**  
#     - Jasmine defines test specs. Karma runs tests in a browser.

# 32. **How do you test HTTP requests in Angular?**  
#     - Use `HttpTestingController` for mocking HTTP requests.

# ---

# ### **Performance Optimization**

# 33. **What is the role of `ChangeDetectionStrategy.OnPush`, and when would you use it?**  
#     - Optimizes performance by checking changes only in input-bound data.

# 34. **How do you optimize Angular apps with lazy loading?**  
#     - Load routes or modules on demand using `loadChildren`.

# 35. **What is the purpose of the `trackBy` function in `*ngFor`?**  
#     - Reduces DOM updates by uniquely identifying list items.

# ---

# ### **Advanced Topics**

# 36. **What is Ahead-of-Time (AOT) compilation, and how does it differ from Just-in-Time (JIT) compilation?**  
#     - AOT compiles templates during build time, JIT during runtime.

# 37. **Explain how Angular handles dependency injection hierarchies.**  
#     - Separate injectors for modules, components, and lazy-loaded modules.

# 38. **What is the purpose of Angular zones, and how does `NgZone` work?**  
#     - Angular zones track async tasks and update the DOM.

# 39. **How do you handle application state when using Angular Universal for server-side rendering?**  
#     - Use TransferState to share data between server and client.

# ---

# ### **Debugging and Tools**

# 40. **How do you debug Angular applications?**  
#     - Use Angular DevTools and Chrome DevTools for DOM inspection and performance analysis.

# 41. **Have you used Angular DevTools? If so, how?**  
#     - Inspect component trees, debug change detection, and performance issues.

# 42. **What is the difference between Angular CLI and manually setting up an Angular project?**  
#     - CLI automates configuration. Manual setup requires configuring files like Webpack.

# ---

# ### **Scenario-Based Questions**

# 43. **How would you handle a performance issue caused by a large number of DOM updates?**  
#     - Use `trackBy` in `*ngFor`, debounce inputs, and `ChangeDetectionStrategy.OnPush`.

# 44. **How would you migrate an AngularJS project to Angular?**  
#     - Use the Angular Upgrade module (`@angular/upgrade`).

# 45. **Describe a situation where you had to solve a challenging problem in an Angular application.**  
#     - Provide a real-world example highlighting debugging or optimizing a specific feature.

# ### **High-Priority Questions for Focused Preparation**

# 1. What are Angular lifecycle hooks, and when would you use `ngOnInit` or `ngAfterViewInit`?  
# 2. How does Angular handle dependency injection?  
# 3. What is lazy loading, and how do you implement it?  
# 4. What is the role of `trackBy` in `*ngFor`?  
# 5. How do you optimize Angular applications for performance?
